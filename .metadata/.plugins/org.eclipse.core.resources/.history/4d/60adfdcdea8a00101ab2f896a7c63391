package com.poultry.controller;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class DashboardController {
    @Autowired private com.poultry.repository.EntryRepository entryRepository;
    @Autowired private com.poultry.repository.TripDetailsRepository tripDetailsRepository;
    @Autowired private com.poultry.repository.VanRepository vanRepository;
    @Autowired private com.poultry.repository.CustomerRepository customerRepository;
    @Autowired private com.poultry.repository.DriverRepository driverRepository;

    @GetMapping("/dashboard")
    public String dashboard(HttpSession session, Model model,
                           @RequestParam(value = "month", required = false) Integer month,
                           @RequestParam(value = "year", required = false) Integer year) {
        if (session.getAttribute("loggedInUser") == null) {
            return "redirect:/login";
        }
        if (month == null || year == null) {
            model.addAttribute("error", "Please select both month and year.");
            return "dashboard";
        }
        model.addAttribute("selectedMonth", month);
        model.addAttribute("selectedYear", year);
        model.addAttribute("currentMonth", month);
        model.addAttribute("currentYear", year);
        model.addAttribute("totalCustomers", customerRepository.count());
        model.addAttribute("totalDrivers", driverRepository.count());
        model.addAttribute("totalVans", vanRepository.count());
        model.addAttribute("tripsThisMonth", tripDetailsRepository.countByMonth(month, year));
        model.addAttribute("entriesThisMonth", entryRepository.countByMonth(month, year));
        model.addAttribute("fuelCost", tripDetailsRepository.sumFuelCostByMonth(month, year) != null ? tripDetailsRepository.sumFuelCostByMonth(month, year) : 0);
        model.addAttribute("deadChicks", tripDetailsRepository.sumDeadChicksByMonth(month, year) != null ? tripDetailsRepository.sumDeadChicksByMonth(month, year) : 0);
        model.addAttribute("entriesAmount", entryRepository.sumFinalPriceByMonth(month, year) != null ? entryRepository.sumFinalPriceByMonth(month, year) : 0);
        model.addAttribute("amountReceived", entryRepository.sumReceivedAmountByMonth(month, year) != null ? entryRepository.sumReceivedAmountByMonth(month, year) : 0);
        Double balanceAmount = entryRepository.sumBalanceAmountByMonth(month, year);
        model.addAttribute("balanceAmount", balanceAmount != null ? balanceAmount : 0);
        Integer birdsCount = entryRepository.sumBirdCountByMonth(month, year);
        model.addAttribute("birdsCount", birdsCount != null ? birdsCount : 0);
        java.util.List<com.poultry.model.TripDetails> recentTrips = tripDetailsRepository.findByMonthAndYear(month, year);
        if (recentTrips.size() > 10) recentTrips = recentTrips.subList(0, 10);
        model.addAttribute("recentTrips", recentTrips);

        // Monthly trends for the selected year (with correct month mapping)
        Double[] monthlyTrendsExpenses = new Double[12];
        Double[] monthlyTrendsSale = new Double[12];
        Double[] monthlyTrendsReceived = new Double[12];
        for (int i = 0; i < 12; i++) {
            monthlyTrendsExpenses[i] = 0.0;
            monthlyTrendsSale[i] = 0.0;
            monthlyTrendsReceived[i] = 0.0;
        }
        java.util.List<Object[]> expensesList = tripDetailsRepository.sumTotalSpentByYearWithMonth(year);
        for (Object[] row : expensesList) {
            int monthIdx = ((Number)row[0]).intValue() - 1;
            monthlyTrendsExpenses[monthIdx] = row[1] != null ? ((Number)row[1]).doubleValue() : 0.0;
        }
        java.util.List<Object[]> saleList = entryRepository.sumFinalPriceByYearWithMonth(year);
        for (Object[] row : saleList) {
            int monthIdx = ((Number)row[0]).intValue() - 1;
            monthlyTrendsSale[monthIdx] = row[1] != null ? ((Number)row[1]).doubleValue() : 0.0;
        }
        java.util.List<Object[]> receivedList = entryRepository.sumReceivedAmountByYearWithMonth(year);
        for (Object[] row : receivedList) {
            int monthIdx = ((Number)row[0]).intValue() - 1;
            monthlyTrendsReceived[monthIdx] = row[1] != null ? ((Number)row[1]).doubleValue() : 0.0;
        }
        model.addAttribute("monthlyTrendsExpenses", monthlyTrendsExpenses);
        model.addAttribute("monthlyTrendsSale", monthlyTrendsSale);
        model.addAttribute("monthlyTrendsReceived", monthlyTrendsReceived);

        // Calculate expenses as sum of fuel_cost, expenses, chicks_amount from trip_details
        Double expenses = tripDetailsRepository.sumExpensesByMonth(month, year);
        model.addAttribute("expenses", expenses != null ? expenses : 0);

        return "dashboard";
    }

    @GetMapping("/")
    public String rootRedirect() {
        return "redirect:/dashboard";
    }
}