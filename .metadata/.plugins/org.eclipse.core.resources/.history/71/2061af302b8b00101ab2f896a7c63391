<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8"/>
  <title>Trip Entries</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet"/>
  <style>
.custom-table-box {
  max-width: 100%;
  width: 100%;
  max-height: 400px;
  min-height: 200px;
  overflow: auto;
  border: 1px solid #dee2e6;
  border-radius: 0.5rem;
  background: #fff;
  margin-bottom: 1rem;
  padding: 0.5rem;
}
  </style>
</head>
<body style="background:#f6f8fa; margin:0; padding:0;">
<%@ include file="nav.jsp" %>
<div class="main-content">
<div class="container mt-4">
  <ul class="nav nav-tabs mb-3" id="entriesTab" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="entries-tab" data-bs-toggle="tab" data-bs-target="#entries-pane" type="button" role="tab" aria-controls="entries-pane" aria-selected="true">Trip Entries</button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="income-tab" data-bs-toggle="tab" data-bs-target="#income-pane" type="button" role="tab" aria-controls="income-pane" aria-selected="false">Update Income Received</button>
    </li>
  </ul>
  <div class="tab-content" id="entriesTabContent">
    <div class="tab-pane fade show active" id="entries-pane" role="tabpanel" aria-labelledby="entries-tab">
      <h2 class="mb-3">Trip Entries</h2>
      <!-- Add Entry Form -->
      <form action="${pageContext.request.contextPath}/entries/save" method="post" class="card p-4 mb-4 shadow-sm bg-white" id="entryForm">
        <div class="row g-3">
          <div class="col-md-3">
            <label class="form-label">Date</label>
            <input type="date" name="date" class="form-control" required/>
          </div>
          <div class="col-md-3">
            <label class="form-label">Trip Number</label>
            <select name="tripNumber" class="form-select" required>
              <option value="">-- Select Trip Number --</option>
              <c:forEach var="t" items="${tripDetailsList}">
                <option value="${t.tripNumber}">${t.tripNumber}</option>
              </c:forEach>
            </select>
          </div>
  	  <div class="col-md-3 position-relative">
  	    <label class="form-label">Customer</label>
  	    <input type="text" id="customerNameInput" class="form-control" placeholder="Type customer name..." autocomplete="off" required />
  	    <input type="hidden" name="customer.id" id="customerIdInput" />
  	    <div id="customerSuggestions" class="list-group position-absolute w-100" style="z-index: 1000; top: 100%;"></div>
  	  </div>
          <div class="col-md-3">
            <label class="form-label">Mode of Payment</label>
			<select name="modeOfPayment" class="form-select" required>
			  <option value="">-- Select Mode of Payment --</option>
			  <option value="phonepe_1519">phonepe_1519</option>
			  <option value="SLG_8755">SLG_8755</option>
			  <option value="SLG_7079">SLG_7079</option>
			  <option value="SLUP_8421">SLUP_8421</option>
			  <option value="OVS">OVS</option>
			</select>

          </div>

          <div class="col-md-3">
            <label class="form-label">Bird Count</label>
            <input type="number" name="birdCount" id="birdCount" class="form-control" min="0" step="1"/>
          </div>
  	  <div class="col-md-3">
  	    <label class="form-label">Weight (kg)</label>
  	    <input type="number" id="weight" name="weight" class="form-control" min="0" step="0.01" required/>
  	  </div>
          <div class="col-md-3">
            <label class="form-label">Unit Price (₹)</label>
            <input type="number" name="unitPrice" id="unitPrice" class="form-control" min="0" step="0.01" required/>
          </div>
          <div class="col-md-3">
            <label class="form-label">Extra Charges (₹)</label>
            <input type="number" name="extraCharges" id="extraCharges" class="form-control" min="0" step="0.01"/>
          </div>

          <div class="col-md-3">
            <label class="form-label">Final Price (₹)</label>
            <input type="number" name="finalPrice" id="finalPrice" class="form-control" min="0" step="0.01" readonly/>
          </div>
          <div class="col-md-3">
            <label class="form-label">Received Amount (₹)</label>
            <input type="number" name="receivedAmount" id="receivedAmount" class="form-control" min="0" step="0.01"/>
          </div>
          <div class="col-md-3">
            <label class="form-label">Balance Amount (₹)</label>
            <input type="number" name="balanceAmount" id="balanceAmount" class="form-control" min="0" step="0.01" readonly/>
          </div>
          <div class="col-md-3">
            <label class="form-label">Book No/Bill No.</label>
            <input type="text" name="bookOrBillNo" id="bookOrBillNo" class="form-control" required pattern=".*\/.*" title="Must contain '/' symbol"/>
          </div>
        </div>
        <div class="row mt-3">
          <div class="col-12 text-end">
            <button class="btn btn-success" type="submit">Save</button>
            <button class="btn btn-secondary ms-2" type="reset">Clear</button>
          </div>
        </div>
      </form>

      <!-- Filters -->
      <div class="row mb-3">
        <div class="col-md-3">
          <input id="filter-customer" class="form-control" placeholder="Filter by customer name" />
        </div>
        <div class="col-md-3">
          <input id="filter-start" type="date" class="form-control" placeholder="Start date" />
        </div>
        <div class="col-md-3">
          <input id="filter-end" type="date" class="form-control" placeholder="End date" />
        </div>
      </div>

      <!-- Entries Table -->
      <div class="custom-table-box">
        <table class="table table-bordered table-hover bg-white shadow-sm" id="entriesTable">
          <thead class="table-dark">
            <tr>
              <th style="min-width: 130px;">Date</th><th>Trip Number</th><th>Customer</th>
              <th>Book No/Bill No.</th>
              <th>Birds</th><th>Weight</th><th>Unit Price</th><th>Extra Charges</th>
              <th>Final Price</th><th>Received</th><th>Balance</th><th>Mode of Payment</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            <!-- Table body will be populated by JavaScript only -->
          </tbody>
        </table>
      </div>

      <!-- Pagination Controls (moved below both tables) -->
      <!-- Pagination removed -->
    </div>
    <div class="tab-pane fade" id="income-pane" role="tabpanel" aria-labelledby="income-tab">
      <div class="card p-4 mb-4 shadow-sm bg-white">
        <h5 class="mb-3">Update Income Received from Customer</h5>
        <form action="${pageContext.request.contextPath}/entries/update-income" method="post">
          <div class="row g-3 align-items-end">
            <div class="col-md-3 position-relative">
              <label class="form-label">Customer</label>
              <input type="text" id="incomeCustomerNameInput" class="form-control" placeholder="Type customer name..." autocomplete="off" required />
              <input type="hidden" name="customerId" id="incomeCustomerIdInput" />
              <div id="incomeCustomerSuggestions" class="list-group position-absolute w-100" style="z-index: 1000; top: 100%;"></div>
            </div>
            <div class="col-md-2">
              <label class="form-label">Mode of Payment</label>
              <input type="text" name="modeOfPayment" class="form-control" />
            </div>
            <div class="col-md-2">
              <label class="form-label">Amount Received (₹)</label>
              <input type="number" name="amountReceived" class="form-control" min="0" step="0.01" required />
            </div>
            <div class="col-md-2">
              <label class="form-label">Date</label>
              <input type="date" name="receivedDate" class="form-control" required />
            </div>
          </div>
          <div class="row mt-3">
            <div class="col-12 text-end">
              <button class="btn btn-success" type="submit">Update Income</button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
  // Inject JSP context path ONCE (safe to keep EL here)
  var contextPath = "${pageContext.request.contextPath}";

  document.addEventListener('DOMContentLoaded', function () {
    // --- Amount calculations ---
    function calculateAmounts() {
      var weight         = parseFloat(document.getElementById('weight').value) || 0;
      var unitPrice      = parseFloat(document.getElementById('unitPrice').value) || 0;
      var extraCharges   = parseFloat(document.getElementById('extraCharges').value) || 0;
      var receivedAmount = parseFloat(document.getElementById('receivedAmount').value) || 0;

      var finalPrice = (weight * unitPrice) + extraCharges;
      document.getElementById('finalPrice').value = finalPrice.toFixed(2);

      var balanceAmount = finalPrice - receivedAmount;
      document.getElementById('balanceAmount').value = balanceAmount.toFixed(2);
    }

    // Attach calc listeners
    var birdCountEl     = document.getElementById('birdCount');
    var unitPriceEl     = document.getElementById('unitPrice');
    var extraChargesEl  = document.getElementById('extraCharges');
    var receivedAmountEl= document.getElementById('receivedAmount');
    if (birdCountEl)     birdCountEl.addEventListener('input',  calculateAmounts);
    if (unitPriceEl)     unitPriceEl.addEventListener('input',  calculateAmounts);
    if (extraChargesEl)  extraChargesEl.addEventListener('input', calculateAmounts);
    if (receivedAmountEl)receivedAmountEl.addEventListener('input', calculateAmounts);

    // --- DOM refs for filters & table ---
    var filterCustomer = document.getElementById('filter-customer');
    var filterStart    = document.getElementById('filter-start');
    var filterEnd      = document.getElementById('filter-end');
    var entriesTable   = document.getElementById('entriesTable');

    // --- Render table ---
    function updateTable(data) {
      var tbody = entriesTable.querySelector('tbody');
      tbody.innerHTML = '';
      if (!Array.isArray(data) || data.length === 0) {
        tbody.innerHTML = '<tr><td colspan="13" class="text-center">No data found</td></tr>';
        return;
      }
      data.forEach(function (e) {
        var tr = document.createElement('tr');
        function td(val) {
          var cell = document.createElement('td');
          cell.textContent = (val !== undefined && val !== null) ? val : '';
          return cell;
        }
        tr.appendChild(td(e.date));
        tr.appendChild(td(e.tripNumber));
        tr.appendChild(td(e.customer && e.customer.name));
        tr.appendChild(td(e.bookOrBillNo));
        tr.appendChild(td(e.birdCount));
        tr.appendChild(td(e.weight));
        tr.appendChild(td(e.unitPrice));
        tr.appendChild(td(e.extraCharges));
        tr.appendChild(td(e.finalPrice));
        tr.appendChild(td(e.receivedAmount));
        tr.appendChild(td(e.balanceAmount));
        tr.appendChild(td(e.modeOfPayment));

        var tdAction = document.createElement('td');
        tdAction.className = 'd-flex gap-1';

        var print = document.createElement('a');
        print.className = 'btn btn-sm btn-outline-primary p-1';
        print.href = contextPath + '/entries/print/' + e.id;
        print.target = '_blank';
        print.title = 'Print';
        print.innerHTML = '<i class="bi bi-printer"></i>';
        tdAction.appendChild(print);

        // WhatsApp button
        if (e.customer && e.customer.phone) {
			var message = '';
			message += 'హలో, ' + e.customer.name + ' గారు, దయచేసి ఇటీవలి ట్రిప్ వివరాలు చూడండి%0A';
			message += 'బుక్/బిల్ నం.: ' + e.bookOrBillNo + '%0A';
			message += 'ట్రిప్ నం.: ' + e.tripNumber + '%0A';
			message += 'తేదీ: ' + e.date + '%0A';
			message += 'చిక్స్ సంఖ్య: ' + e.birdCount + '%0A';
			message += 'బరువు: ' + e.weight + ' కేజీ%0A';
			message += 'యూనిట్ ధర: ₹' + e.unitPrice + '%0A';
			message += 'అదనపు ఛార్జీలు: ₹' + e.extraCharges + '%0A';
			message += 'తుది మొత్తం: ₹' + e.finalPrice + '%0A';
			message += 'అందుకున్న మొత్తం: ₹' + e.receivedAmount + '%0A';
			message += 'మిగిలిన బకాయి: ₹' + e.balanceAmount + '%0A';
			message += 'చెల్లింపు విధానం: ' + e.modeOfPayment + '%0A';
			message += '%0A*మొత్తం మిగిలిన బకాయి*: ₹' + (e.customer.outstandingAmount || 0) + '%0A';

          var whatsapp = document.createElement('a');
          whatsapp.className = 'btn btn-sm btn-success p-1';
          whatsapp.href = 'https://wa.me/' + e.customer.phone + '?text=' + message;
          whatsapp.target = '_blank';
          whatsapp.title = 'Send WhatsApp';
          whatsapp.innerHTML = '<i class="bi bi-whatsapp"></i>';
          tdAction.appendChild(whatsapp);
        }

        var edit = document.createElement('a');
        edit.className = 'btn btn-sm btn-outline-warning p-1';
        edit.href = contextPath + '/entries/edit/' + e.id;
        edit.title = 'Edit';
        edit.innerHTML = '<i class="bi bi-pencil-square"></i>';
        tdAction.appendChild(edit);

        var del = document.createElement('a');
        del.className = 'btn btn-sm btn-outline-danger p-1';
        del.href = contextPath + '/entries/delete/' + e.id;
        del.title = 'Delete';
        del.onclick = function () { return confirm('Are you sure you want to delete the entry?'); };
        del.innerHTML = '<i class="bi bi-trash"></i>';
        tdAction.appendChild(del);

        tr.appendChild(tdAction);
        tbody.appendChild(tr);
      });
    }

    // --- Initial load (no filters) ---
    function loadEntries() {
      var url = contextPath + '/entries/filter';
      fetch(url)
        .then(function (r) { return r.json(); })
        .then(updateTable)
        .catch(function (err) { console.error('Initial load failed:', err); });
		console.log('Loading entries from:', url);
    }

    // --- Filters: build URL safely (no template literals) ---
    function filterEntries() {
      var customer = (filterCustomer && filterCustomer.value ? filterCustomer.value : '').trim();
      var start    = (filterStart && filterStart.value ? filterStart.value : '');
      var end      = (filterEnd && filterEnd.value ? filterEnd.value : '');

      var params = new URLSearchParams();
      if (customer) params.set('customerName', customer); // change key to 'customerId' if API expects ID
      if (start)    params.set('startDate', start);
      if (end)      params.set('endDate', end);

      var qs  = params.toString();
      var url = qs ? (contextPath + '/entries/filter?' + qs)
                   : (contextPath + '/entries/filter');

      console.log('qs:', qs);
      console.log('Fetching URL:', url);

      fetch(url)
        .then(function (r) { return r.json(); })
        .then(updateTable)
        .catch(function (err) { console.error('Filter fetch failed:', err); });
    }

    if (filterCustomer) filterCustomer.addEventListener('input',  filterEntries);
    if (filterStart)    filterStart.addEventListener('change',    filterEntries);
    if (filterEnd)      filterEnd.addEventListener('change',      filterEntries);

    // --- Customer Autocomplete (name+hidden id) ---
    var customerInput   = document.getElementById('customerNameInput');
    var customerIdInput = document.getElementById('customerIdInput');
    var suggestionsBox  = document.getElementById('customerSuggestions');
    var acTimer = null;

    function clearSuggestions() {
      if (!suggestionsBox) return;
      suggestionsBox.innerHTML = '';
      suggestionsBox.style.display = 'none';
    }

    function renderSuggestions(list) {
      if (!suggestionsBox) return;
      suggestionsBox.innerHTML = '';
      if (!Array.isArray(list) || list.length === 0) {
        clearSuggestions();
        return;
      }
      list.forEach(function (item) {
        // expected: { id: <number>, name: <string> }
        var a = document.createElement('a');
        a.href = '#';
        a.className = 'list-group-item list-group-item-action';
        a.textContent = item.name;
        a.addEventListener('click', function (ev) {
          ev.preventDefault();
          if (customerInput)   customerInput.value = item.name;
          console.log('Selected customer ID:', item.id);
          if (customerIdInput) customerIdInput.value = item.id;
          clearSuggestions();
        });
        suggestionsBox.appendChild(a);
      });
      suggestionsBox.style.display = 'block';
    }

    if (customerInput) {
      customerInput.addEventListener('input', function () {
        var q = customerInput.value.trim();
        if (customerIdInput) customerIdInput.value = ''; // reset until user selects

        if (acTimer) clearTimeout(acTimer);
        if (q.length < 2) { clearSuggestions(); return; }

        acTimer = setTimeout(function () {
          var url = contextPath + '/entries/customer-suggestions?q=' + encodeURIComponent(q);
          fetch(url)
            .then(function (r) { return r.json(); })
            .then(renderSuggestions)
            .catch(function () { clearSuggestions(); });
        }, 250);
      });

      // Hide on blur (allow click)
      customerInput.addEventListener('blur', function () {
        setTimeout(clearSuggestions, 150);
      });
    }

    // --- Income Customer Autocomplete ---
    var incomeCustomerInput   = document.getElementById('incomeCustomerNameInput');
    var incomeCustomerIdInput = document.getElementById('incomeCustomerIdInput');
    var incomeSuggestionsBox  = document.getElementById('incomeCustomerSuggestions');
    var incomeAcTimer = null;

    function clearIncomeSuggestions() {
      if (!incomeSuggestionsBox) return;
      incomeSuggestionsBox.innerHTML = '';
      incomeSuggestionsBox.style.display = 'none';
    }

    function renderIncomeSuggestions(list) {
      if (!incomeSuggestionsBox) return;
      incomeSuggestionsBox.innerHTML = '';
      if (!Array.isArray(list) || list.length === 0) {
        clearIncomeSuggestions();
        return;
      }
      list.forEach(function (item) {
        var a = document.createElement('a');
        a.href = '#';
        a.className = 'list-group-item list-group-item-action';
        a.textContent = item.name;
        a.addEventListener('click', function (ev) {
          ev.preventDefault();
          if (incomeCustomerInput)   incomeCustomerInput.value = item.name;
          if (incomeCustomerIdInput) incomeCustomerIdInput.value = item.id;
          clearIncomeSuggestions();
        });
        incomeSuggestionsBox.appendChild(a);
      });
      incomeSuggestionsBox.style.display = 'block';
    }

    if (incomeCustomerInput) {
      incomeCustomerInput.addEventListener('input', function () {
        var q = incomeCustomerInput.value.trim();
        if (incomeCustomerIdInput) incomeCustomerIdInput.value = '';
        if (incomeAcTimer) clearTimeout(incomeAcTimer);
        if (q.length < 2) { clearIncomeSuggestions(); return; }
        incomeAcTimer = setTimeout(function () {
          var url = contextPath + '/entries/customer-suggestions?q=' + encodeURIComponent(q);
          fetch(url)
            .then(function (r) { return r.json(); })
            .then(renderIncomeSuggestions)
            .catch(function () { clearIncomeSuggestions(); });
        }, 250);
      });
      incomeCustomerInput.addEventListener('blur', function () {
        setTimeout(clearIncomeSuggestions, 150);
      });
    }

    // Kick off
    loadEntries();
  });
</script>


</body>
</html>